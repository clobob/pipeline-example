pipeline {
    agent {label 'TEST-BM1-LINUX-CENTOS'}
	tools {maven 'Maven3'}
	stages {
		stage('CheckOut') {
			steps{
				checkout([$class: 'SubversionSCM', filterChangelog: false, ignoreDirPropChanges: false, 
				locations: [[credentialsId: 'f6f3c1f6-888a-4dce-aff6-fafe7705e27b', depthOption: 'infinity', 
				ignoreExternalsOption: false, local: '.', remote: 'https://192.168.14.101:18080/svn/avm/trunck/src/avm']], 
				quietOperation: true, workspaceUpdater: [$class: 'UpdateUpdater']])
				
			}
		}
		stage('Build') {
			
			steps {
				configFileProvider(
				[configFile(fileId: 'f426efe2-d1dd-4d5e-a87c-8b06838dedcb', variable: 'MAVEN_SETTINGS')]) {
					sh "mvn -s $MAVEN_SETTINGS clean install -DskipTests=true"
				}
				
				sh 'ls -l ./target/'
				
			}
		}
		stage('CodeScan') {
			steps {
				
				withSonarQubeEnv('CLOTestTeamSonarAlpha') {
					withEnv(['Sonar_Home=/home/dockeruser/tools/hudson.plugins.sonar.SonarRunnerInstallation/SonarScanner']) {
					sh '$Sonar_Home/bin/sonar-scanner -X -Dsonar.projectKey=${JOB_NAME} \
													  -Dsonar.projectName=${JOB_NAME} \
													  -Dsonar.sourceEncoding=UTF-8 \
													  -Dsonar.projectVersion=${BUILD_NUMBER} \
													  -Dsonar.sources=${WORKSPACE}/src \
													  -Dsonar.java.binaries=${WORKSPACE}/target/classes'
					
					}
					
				}
			}
		}
		stage('Deploy') {
			steps{
				sh '''avm=`docker ps |grep CloAvm|awk \'{print $1}\'`
				if [ "${avm}" = "" ];then
					docker run -d --name=jenkins_CloAvm --network=host \\
					-v /home/dockeruser/workspace/BU2-Pipeline-CloAvm/target/avm:/usr/local/tomcat/webapps/avm \\
					tomcat:8.0.47-jre8
				else
					docker restart jenkins_CloAvm
				fi'''
			}
		}
	}
}